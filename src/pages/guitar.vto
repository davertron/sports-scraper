---
title: "davertron.com - Guitar"
url: "/guitar.html"
layout: "layout.vto"
---

<style>
  #guitar-app {
    svg {
      #background {
        fill: transparent;
      }
    }
  }
</style>
<div id="guitar-app"></div>
<img src="/static/guitar_guide.png" />

<script type="module">
  import { h, render } from 'https://esm.sh/preact';

  const margin = {top: 40, bottom: 40, left: 40, right: 40};
  const d = {w: 1100, h: 250};
  const fretBoardWidth = d.w - margin.left - margin.right;
  const fretBoardHeight = d.h - margin.top - margin.bottom;
  const stringGap = fretBoardHeight / 5;
  const nutWidth = 40;
  const numOfFrets = 16;
  const fretGap = (fretBoardWidth - nutWidth) / numOfFrets;
  const fretPositions = [];
  const strokeWidth = 3;
  const stringWidth = fretBoardWidth - nutWidth;
  for (let i = 1; i < numOfFrets; i++) {
    fretPositions.push(i * fretGap);
  }
  const fretMarkerRadius = (stringGap / 2) * 0.7;
  function Fretboard() {
    return h('svg', {width: d.w, height: d.h},
      h('rect', { id: 'background', width: d.w, height: d.h}),
      // TODO: Add string labels
      //h('text', { id: 'low-e', x: 0, y: d.h, style: 'font: bold 26px sans-serif', fill: 'black'}, 'E'),
      h('g', {id: 'fretboard', transform: `translate(${margin.left}, ${margin.top})`, width: d.w - margin.left - margin.right, height: d.h - margin.top - margin.bottom}, [ 
        h('rect', { id: 'nut', width: nutWidth, height: fretBoardHeight, fill: 'black' }),
        h('g', {id: 'strings-and-frets', transform: `translate(${nutWidth}, 0)`, 'stroke-width': strokeWidth, stroke: 'black'}, [
          h('line', { id: 'high-e', x1: 0, y1: strokeWidth / 2, x2: stringWidth, y2: strokeWidth / 2}),
          h('line', { id: 'b', x1: 0, y1: stringGap, x2: stringWidth, y2: stringGap}),
          h('line', { id: 'g', x1: 0, y1: 2 * stringGap, x2: stringWidth, y2: 2 * stringGap}),
          h('line', { id: 'd', x1: 0, y1: 3 * stringGap, x2: stringWidth, y2: 3 * stringGap}),
          h('line', { id: 'a', x1: 0, y1: 4 * stringGap, x2: stringWidth, y2: 4 * stringGap}),
          h('line', { id: 'low-e', x1: 0, y1: 5 * stringGap - strokeWidth / 2, x2: stringWidth, y2: 5 * stringGap - strokeWidth / 2}),
          ...fretPositions.map((x, i) => 
            h('line', { id: 'fret-' + (i + 1), x1: x, y1: 0, x2: x, y2: fretBoardHeight})
          ),
          h('line', { id: 'fret-last', x1: fretBoardWidth - nutWidth, y1: 0, x2: fretBoardWidth - nutWidth, y2: fretBoardHeight}),
          // Fret markers
          h('g', { id: 'fret-markers', fill: 'black', stroke: 'black', strokeWidth: 1}, [
            h('circle', { id: 'fret-3-marker', cx: fretPositions[2] - fretGap / 2, cy: fretBoardHeight / 2, r: fretMarkerRadius}),
            h('circle', { id: 'fret-5-marker', cx: fretPositions[4] - fretGap / 2, cy: fretBoardHeight / 2, r: fretMarkerRadius}),
            h('circle', { id: 'fret-7-marker', cx: fretPositions[6] - fretGap / 2, cy: fretBoardHeight / 2, r: fretMarkerRadius}),
            h('circle', { id: 'fret-9-marker', cx: fretPositions[8] - fretGap / 2, cy: fretBoardHeight / 2, r: fretMarkerRadius}),
            h('circle', { id: 'fret-12-marker-1', cx: fretPositions[11] - fretGap / 2, cy: (fretBoardHeight / 2) - stringGap, r: fretMarkerRadius}),
            h('circle', { id: 'fret-12-marker-2', cx: fretPositions[11] - fretGap / 2, cy: (fretBoardHeight / 2) + stringGap, r: fretMarkerRadius}),
            h('circle', { id: 'fret-15-marker-1', cx: fretPositions[14] - fretGap / 2, cy: (fretBoardHeight / 2), r: fretMarkerRadius}),
          ]),
        ]),
      ]),
    );
  }

  // Create your app
  const app = h(Fretboard);
  render(app, document.getElementById('guitar-app'));

</script>
